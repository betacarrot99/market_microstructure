
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Path to the CSV log generated by the trading script
LOG_CSV = 'result/live_pnl_log_RANDOM_FOREST.csv'
UPDATE_INTERVAL_MS = 1000  # refresh interval in milliseconds

# Create figure and subplots in desired sequence
fig, axes = plt.subplots(5, 1, sharex=True, figsize=(10, 10))
ax_price, ax_market, ax_real, ax_unreal, ax_acc = axes

# Initialize line objects for each metric
line_price, = ax_price.plot([], [], label='Price')
line_market, = ax_market.plot([], [], label='Market PnL')
line_real, = ax_real.plot([], [], label='Realized PnL')
line_unreal, = ax_unreal.plot([], [], label='Unrealized PnL')
line_acc, = ax_acc.plot([], [], label='Accuracy')

# Set y-axis labels
ax_price.set_ylabel('Price')
ax_market.set_ylabel('Market PnL')
ax_real.set_ylabel('Realized PnL')
ax_unreal.set_ylabel('Unrealized PnL')
ax_acc.set_ylabel('Accuracy')
ax_acc.set_xlabel('Seconds Since Start')

# Enable legends and grids
for ax in axes:
    ax.legend(loc='upper left')
    ax.grid(True)

# Zero‚Äêtime reference
t0 = None


def update(frame):
    global t0
    # Read the CSV each interval
    df = pd.read_csv(LOG_CSV, parse_dates=['timestamp'])
    df = df.dropna(subset=['price', 'realized_pnl', 'unrealized_pnl', 'market_pnl', 'accuracy'])

    # On first call, set t0 to the initial timestamp
    if t0 is None and not df.empty:
        t0 = df['timestamp'].iloc[0]

    # Compute elapsed seconds
    elapsed = (df['timestamp'] - t0).dt.total_seconds()

    # Extract data series
    y_price = df['price']
    y_market = df['market_pnl']
    y_real = df['realized_pnl']
    y_unreal = df['unrealized_pnl']
    y_acc = df['accuracy']

    # Update line data
    line_price.set_data(elapsed, y_price)
    line_market.set_data(elapsed, y_market)
    line_real.set_data(elapsed, y_real)
    line_unreal.set_data(elapsed, y_unreal)
    line_acc.set_data(elapsed, y_acc)

    # Rescale axes
    for ax in axes:
        ax.relim()
        ax.autoscale_view()

    # Rotate x-axis labels on the bottom plot
    plt.setp(ax_acc.get_xticklabels(), rotation=45, ha='right')

    # Update subplot titles with latest values
    ax_price.set_title(f"Price: US${y_price.iloc[-1]:.2f}", fontsize=8, pad=3)
    ax_market.set_title(f"Market PnL: US${y_market.iloc[-1]:.2f}", fontsize=8, pad=3)
    ax_real.set_title(f"Realized PnL: US${y_real.iloc[-1]:.2f}", fontsize=8, pad=3)
    ax_unreal.set_title(f"Unrealized PnL: US${y_unreal.iloc[-1]:.2f}", fontsize=8, pad=3)
    ax_acc.set_title(f"Accuracy: {y_acc.iloc[-1]:.2f}%", fontsize=8, pad=3)

    # Return updated lines
    return line_price, line_market, line_real, line_unreal, line_acc

# Create and start animation
ani = FuncAnimation(fig, update, interval=UPDATE_INTERVAL_MS)
plt.tight_layout()
plt.show()
